// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: notary_service.proto

// auto gen codes: protoc --go_out=paths=source_relative:. -I. *.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BlockchainTxStatus is used to record blockchain transaction status, once a cross transaction is created notary service should
// start monitoring different blockchain updates and record tx status in BlockchainTxStatus.
type BlockchainTxStatus int32

const (
	BlockchainTxStatus_waitingUserSent BlockchainTxStatus = 0
	BlockchainTxStatus_waitingVConfirm BlockchainTxStatus = 1
	BlockchainTxStatus_vConfirmed      BlockchainTxStatus = 2
	BlockchainTxStatus_waitingUConfirm BlockchainTxStatus = 3
	BlockchainTxStatus_uConfirmed      BlockchainTxStatus = 4
	BlockchainTxStatus_failed          BlockchainTxStatus = 5
)

// Enum value maps for BlockchainTxStatus.
var (
	BlockchainTxStatus_name = map[int32]string{
		0: "waitingUserSent",
		1: "waitingVConfirm",
		2: "vConfirmed",
		3: "waitingUConfirm",
		4: "uConfirmed",
		5: "failed",
	}
	BlockchainTxStatus_value = map[string]int32{
		"waitingUserSent": 0,
		"waitingVConfirm": 1,
		"vConfirmed":      2,
		"waitingUConfirm": 3,
		"uConfirmed":      4,
		"failed":          5,
	}
)

func (x BlockchainTxStatus) Enum() *BlockchainTxStatus {
	p := new(BlockchainTxStatus)
	*p = x
	return p
}

func (x BlockchainTxStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockchainTxStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_notary_service_proto_enumTypes[0].Descriptor()
}

func (BlockchainTxStatus) Type() protoreflect.EnumType {
	return &file_notary_service_proto_enumTypes[0]
}

func (x BlockchainTxStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockchainTxStatus.Descriptor instead.
func (BlockchainTxStatus) EnumDescriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{0}
}

// cross transaction ticket status
type TicketStatus int32

const (
	TicketStatus_created  TicketStatus = 0
	TicketStatus_finished TicketStatus = 1
	TicketStatus_txFailed TicketStatus = 2
)

// Enum value maps for TicketStatus.
var (
	TicketStatus_name = map[int32]string{
		0: "created",
		1: "finished",
		2: "txFailed",
	}
	TicketStatus_value = map[string]int32{
		"created":  0,
		"finished": 1,
		"txFailed": 2,
	}
)

func (x TicketStatus) Enum() *TicketStatus {
	p := new(TicketStatus)
	*p = x
	return p
}

func (x TicketStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_notary_service_proto_enumTypes[1].Descriptor()
}

func (TicketStatus) Type() protoreflect.EnumType {
	return &file_notary_service_proto_enumTypes[1]
}

func (x TicketStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketStatus.Descriptor instead.
func (TicketStatus) EnumDescriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{1}
}

type TicketOps int32

const (
	TicketOps_approve TicketOps = 0
	TicketOps_reject  TicketOps = 1
	TicketOps_quite   TicketOps = 2
)

// Enum value maps for TicketOps.
var (
	TicketOps_name = map[int32]string{
		0: "approve",
		1: "reject",
		2: "quite",
	}
	TicketOps_value = map[string]int32{
		"approve": 0,
		"reject":  1,
		"quite":   2,
	}
)

func (x TicketOps) Enum() *TicketOps {
	p := new(TicketOps)
	*p = x
	return p
}

func (x TicketOps) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketOps) Descriptor() protoreflect.EnumDescriptor {
	return file_notary_service_proto_enumTypes[2].Descriptor()
}

func (TicketOps) Type() protoreflect.EnumType {
	return &file_notary_service_proto_enumTypes[2]
}

func (x TicketOps) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketOps.Descriptor instead.
func (TicketOps) EnumDescriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{2}
}

type TransferPropertyRequest_NetworkType int32

const (
	TransferPropertyRequest_eth    TransferPropertyRequest_NetworkType = 0
	TransferPropertyRequest_fabric TransferPropertyRequest_NetworkType = 1
)

// Enum value maps for TransferPropertyRequest_NetworkType.
var (
	TransferPropertyRequest_NetworkType_name = map[int32]string{
		0: "eth",
		1: "fabric",
	}
	TransferPropertyRequest_NetworkType_value = map[string]int32{
		"eth":    0,
		"fabric": 1,
	}
)

func (x TransferPropertyRequest_NetworkType) Enum() *TransferPropertyRequest_NetworkType {
	p := new(TransferPropertyRequest_NetworkType)
	*p = x
	return p
}

func (x TransferPropertyRequest_NetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferPropertyRequest_NetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_notary_service_proto_enumTypes[3].Descriptor()
}

func (TransferPropertyRequest_NetworkType) Type() protoreflect.EnumType {
	return &file_notary_service_proto_enumTypes[3]
}

func (x TransferPropertyRequest_NetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferPropertyRequest_NetworkType.Descriptor instead.
func (TransferPropertyRequest_NetworkType) EnumDescriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{5, 0}
}

// empty message, used to fill in the rpc arguments or return types
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_notary_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{0}
}

// cross chain transaction filled parameters
type CrossTxDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EFrom          string `protobuf:"bytes,1,opt,name=eFrom,proto3" json:"eFrom,omitempty"`
	ETo            string `protobuf:"bytes,2,opt,name=eTo,proto3" json:"eTo,omitempty"`
	EAmount        string `protobuf:"bytes,3,opt,name=eAmount,proto3" json:"eAmount,omitempty"`
	FFrom          string `protobuf:"bytes,4,opt,name=fFrom,proto3" json:"fFrom,omitempty"`
	FTo            string `protobuf:"bytes,5,opt,name=fTo,proto3" json:"fTo,omitempty"`
	FAmount        string `protobuf:"bytes,6,opt,name=fAmount,proto3" json:"fAmount,omitempty"`
	FChannel       string `protobuf:"bytes,7,opt,name=fChannel,proto3" json:"fChannel,omitempty"`
	FChaincodeName string `protobuf:"bytes,8,opt,name=fChaincodeName,proto3" json:"fChaincodeName,omitempty"` // channel name and contract name,
}

func (x *CrossTxDetail) Reset() {
	*x = CrossTxDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossTxDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossTxDetail) ProtoMessage() {}

func (x *CrossTxDetail) ProtoReflect() protoreflect.Message {
	mi := &file_notary_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossTxDetail.ProtoReflect.Descriptor instead.
func (*CrossTxDetail) Descriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{1}
}

func (x *CrossTxDetail) GetEFrom() string {
	if x != nil {
		return x.EFrom
	}
	return ""
}

func (x *CrossTxDetail) GetETo() string {
	if x != nil {
		return x.ETo
	}
	return ""
}

func (x *CrossTxDetail) GetEAmount() string {
	if x != nil {
		return x.EAmount
	}
	return ""
}

func (x *CrossTxDetail) GetFFrom() string {
	if x != nil {
		return x.FFrom
	}
	return ""
}

func (x *CrossTxDetail) GetFTo() string {
	if x != nil {
		return x.FTo
	}
	return ""
}

func (x *CrossTxDetail) GetFAmount() string {
	if x != nil {
		return x.FAmount
	}
	return ""
}

func (x *CrossTxDetail) GetFChannel() string {
	if x != nil {
		return x.FChannel
	}
	return ""
}

func (x *CrossTxDetail) GetFChaincodeName() string {
	if x != nil {
		return x.FChaincodeName
	}
	return ""
}

// error message with error code, set code to none-zero values if error happens
// record error message in errMsg
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_notary_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{2}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

// Request received from user to specify a cross chain transaction
type CreateCrossTxReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail *CrossTxDetail `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *CreateCrossTxReq) Reset() {
	*x = CreateCrossTxReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCrossTxReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCrossTxReq) ProtoMessage() {}

func (x *CreateCrossTxReq) ProtoReflect() protoreflect.Message {
	mi := &file_notary_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCrossTxReq.ProtoReflect.Descriptor instead.
func (*CreateCrossTxReq) Descriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCrossTxReq) GetDetail() *CrossTxDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

// Response send to user or client when a specified request received.
// if error happens, fill error code and error message.
type CreateCrossTxResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error       *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	CTxId       string `protobuf:"bytes,2,opt,name=cTxId,proto3" json:"cTxId,omitempty"` //cross transaction id
	VEthAddress string `protobuf:"bytes,3,opt,name=vEthAddress,proto3" json:"vEthAddress,omitempty"`
	VFabAddress string `protobuf:"bytes,4,opt,name=vFabAddress,proto3" json:"vFabAddress,omitempty"`
}

func (x *CreateCrossTxResp) Reset() {
	*x = CreateCrossTxResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCrossTxResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCrossTxResp) ProtoMessage() {}

func (x *CreateCrossTxResp) ProtoReflect() protoreflect.Message {
	mi := &file_notary_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCrossTxResp.ProtoReflect.Descriptor instead.
func (*CreateCrossTxResp) Descriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCrossTxResp) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateCrossTxResp) GetCTxId() string {
	if x != nil {
		return x.CTxId
	}
	return ""
}

func (x *CreateCrossTxResp) GetVEthAddress() string {
	if x != nil {
		return x.VEthAddress
	}
	return ""
}

func (x *CreateCrossTxResp) GetVFabAddress() string {
	if x != nil {
		return x.VFabAddress
	}
	return ""
}

// this request is used for users to send tokens to the verifier/notary
// in this request, user should specify the target cross transaction id and network type(ether or fabric)
type TransferPropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedData  []byte                              `protobuf:"bytes,1,opt,name=signedData,proto3" json:"signedData,omitempty"` // signed ether transaction data
	CTxId       string                              `protobuf:"bytes,2,opt,name=cTxId,proto3" json:"cTxId,omitempty"`           // cross transaction id
	NetworkType TransferPropertyRequest_NetworkType `protobuf:"varint,3,opt,name=networkType,proto3,enum=proto.TransferPropertyRequest_NetworkType" json:"networkType,omitempty"`
}

func (x *TransferPropertyRequest) Reset() {
	*x = TransferPropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferPropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferPropertyRequest) ProtoMessage() {}

func (x *TransferPropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notary_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferPropertyRequest.ProtoReflect.Descriptor instead.
func (*TransferPropertyRequest) Descriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{5}
}

func (x *TransferPropertyRequest) GetSignedData() []byte {
	if x != nil {
		return x.SignedData
	}
	return nil
}

func (x *TransferPropertyRequest) GetCTxId() string {
	if x != nil {
		return x.CTxId
	}
	return ""
}

func (x *TransferPropertyRequest) GetNetworkType() TransferPropertyRequest_NetworkType {
	if x != nil {
		return x.NetworkType
	}
	return TransferPropertyRequest_eth
}

// response of the LockEtherRequest, return ether transaction id or receipt if necessary,
// or return error message if transaction is not valid
type TransferPropertyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ETxid string `protobuf:"bytes,2,opt,name=eTxid,proto3" json:"eTxid,omitempty"`
}

func (x *TransferPropertyResponse) Reset() {
	*x = TransferPropertyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferPropertyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferPropertyResponse) ProtoMessage() {}

func (x *TransferPropertyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notary_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferPropertyResponse.ProtoReflect.Descriptor instead.
func (*TransferPropertyResponse) Descriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{6}
}

func (x *TransferPropertyResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TransferPropertyResponse) GetETxid() string {
	if x != nil {
		return x.ETxid
	}
	return ""
}

// list cross transaction, add filter if necessage
type ListTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTxRequest) Reset() {
	*x = ListTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTxRequest) ProtoMessage() {}

func (x *ListTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notary_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTxRequest.ProtoReflect.Descriptor instead.
func (*ListTxRequest) Descriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{7}
}

// EscrowingStatus means ethereum tx execute result, fabric tx execute result is also included.
type EscrowStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EStatus BlockchainTxStatus `protobuf:"varint,1,opt,name=eStatus,proto3,enum=proto.BlockchainTxStatus" json:"eStatus,omitempty"`
	FStatus BlockchainTxStatus `protobuf:"varint,2,opt,name=fStatus,proto3,enum=proto.BlockchainTxStatus" json:"fStatus,omitempty"`
}

func (x *EscrowStatus) Reset() {
	*x = EscrowStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EscrowStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EscrowStatus) ProtoMessage() {}

func (x *EscrowStatus) ProtoReflect() protoreflect.Message {
	mi := &file_notary_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EscrowStatus.ProtoReflect.Descriptor instead.
func (*EscrowStatus) Descriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{8}
}

func (x *EscrowStatus) GetEStatus() BlockchainTxStatus {
	if x != nil {
		return x.EStatus
	}
	return BlockchainTxStatus_waitingUserSent
}

func (x *EscrowStatus) GetFStatus() BlockchainTxStatus {
	if x != nil {
		return x.FStatus
	}
	return BlockchainTxStatus_waitingUserSent
}

type CrossTxStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Status:
	//	*CrossTxStatus_TStatus
	//	*CrossTxStatus_EStatus
	Status isCrossTxStatus_Status `protobuf_oneof:"status"`
}

func (x *CrossTxStatus) Reset() {
	*x = CrossTxStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossTxStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossTxStatus) ProtoMessage() {}

func (x *CrossTxStatus) ProtoReflect() protoreflect.Message {
	mi := &file_notary_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossTxStatus.ProtoReflect.Descriptor instead.
func (*CrossTxStatus) Descriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{9}
}

func (m *CrossTxStatus) GetStatus() isCrossTxStatus_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (x *CrossTxStatus) GetTStatus() TicketStatus {
	if x, ok := x.GetStatus().(*CrossTxStatus_TStatus); ok {
		return x.TStatus
	}
	return TicketStatus_created
}

func (x *CrossTxStatus) GetEStatus() *EscrowStatus {
	if x, ok := x.GetStatus().(*CrossTxStatus_EStatus); ok {
		return x.EStatus
	}
	return nil
}

type isCrossTxStatus_Status interface {
	isCrossTxStatus_Status()
}

type CrossTxStatus_TStatus struct {
	TStatus TicketStatus `protobuf:"varint,1,opt,name=tStatus,proto3,enum=proto.TicketStatus,oneof"`
}

type CrossTxStatus_EStatus struct {
	EStatus *EscrowStatus `protobuf:"bytes,2,opt,name=eStatus,proto3,oneof"`
}

func (*CrossTxStatus_TStatus) isCrossTxStatus_Status() {}

func (*CrossTxStatus_EStatus) isCrossTxStatus_Status() {}

// cross transaction ticket info
type CrossTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CTxId  string         `protobuf:"bytes,1,opt,name=cTxId,proto3" json:"cTxId,omitempty"`
	Detail *CrossTxDetail `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
	Status *CrossTxStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CrossTx) Reset() {
	*x = CrossTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossTx) ProtoMessage() {}

func (x *CrossTx) ProtoReflect() protoreflect.Message {
	mi := &file_notary_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossTx.ProtoReflect.Descriptor instead.
func (*CrossTx) Descriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{10}
}

func (x *CrossTx) GetCTxId() string {
	if x != nil {
		return x.CTxId
	}
	return ""
}

func (x *CrossTx) GetDetail() *CrossTxDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *CrossTx) GetStatus() *CrossTxStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// list all the cross chain transaction tickets with detail info
// set error message to error if error happens
type ListTxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Detail []*CrossTx `protobuf:"bytes,2,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *ListTxResponse) Reset() {
	*x = ListTxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTxResponse) ProtoMessage() {}

func (x *ListTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notary_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTxResponse.ProtoReflect.Descriptor instead.
func (*ListTxResponse) Descriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListTxResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListTxResponse) GetDetail() []*CrossTx {
	if x != nil {
		return x.Detail
	}
	return nil
}

// query cross transaction with specified ticket id
type QueryTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId string `protobuf:"bytes,1,opt,name=ticketId,proto3" json:"ticketId,omitempty"`
}

func (x *QueryTxRequest) Reset() {
	*x = QueryTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTxRequest) ProtoMessage() {}

func (x *QueryTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notary_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTxRequest.ProtoReflect.Descriptor instead.
func (*QueryTxRequest) Descriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{12}
}

func (x *QueryTxRequest) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

// response to query cross chain transaction ticket with specified ticket id
type QueryTxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Detail *CrossTx `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *QueryTxResponse) Reset() {
	*x = QueryTxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTxResponse) ProtoMessage() {}

func (x *QueryTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notary_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTxResponse.ProtoReflect.Descriptor instead.
func (*QueryTxResponse) Descriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{13}
}

func (x *QueryTxResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *QueryTxResponse) GetDetail() *CrossTx {
	if x != nil {
		return x.Detail
	}
	return nil
}

// admin approve or reject a cross transaction ticket
type AdminOpTicketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CTxTicketId string    `protobuf:"bytes,1,opt,name=cTxTicketId,proto3" json:"cTxTicketId,omitempty"`
	Op          TicketOps `protobuf:"varint,2,opt,name=op,proto3,enum=proto.TicketOps" json:"op,omitempty"`
}

func (x *AdminOpTicketReq) Reset() {
	*x = AdminOpTicketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminOpTicketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminOpTicketReq) ProtoMessage() {}

func (x *AdminOpTicketReq) ProtoReflect() protoreflect.Message {
	mi := &file_notary_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminOpTicketReq.ProtoReflect.Descriptor instead.
func (*AdminOpTicketReq) Descriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{14}
}

func (x *AdminOpTicketReq) GetCTxTicketId() string {
	if x != nil {
		return x.CTxTicketId
	}
	return ""
}

func (x *AdminOpTicketReq) GetOp() TicketOps {
	if x != nil {
		return x.Op
	}
	return TicketOps_approve
}

// admin operation response, set error code to None-zero if error happens
type AdminOpTicketResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err *Error `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *AdminOpTicketResp) Reset() {
	*x = AdminOpTicketResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminOpTicketResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminOpTicketResp) ProtoMessage() {}

func (x *AdminOpTicketResp) ProtoReflect() protoreflect.Message {
	mi := &file_notary_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminOpTicketResp.ProtoReflect.Descriptor instead.
func (*AdminOpTicketResp) Descriptor() ([]byte, []int) {
	return file_notary_service_proto_rawDescGZIP(), []int{15}
}

func (x *AdminOpTicketResp) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

var File_notary_service_proto protoreflect.FileDescriptor

var file_notary_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a,
	0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xd7, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x54, 0x78, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x54, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x46,
	0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x54, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66,
	0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x33, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x40, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x54, 0x78, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x78, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x91, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x54, 0x78, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x54, 0x78, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x45, 0x74, 0x68, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x45,
	0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x46, 0x61,
	0x62, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x76, 0x46, 0x61, 0x62, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x17,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x54, 0x78, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x54, 0x78, 0x49, 0x64, 0x12, 0x4c, 0x0a,
	0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x22, 0x0a, 0x0b, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x65, 0x74,
	0x68, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x10, 0x01, 0x22,
	0x54, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x54, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x54, 0x78, 0x69, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x78, 0x0a, 0x0c, 0x45, 0x73, 0x63, 0x72, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x07, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x66,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x7b, 0x0a, 0x0d, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x07, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x73, 0x63, 0x72,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x07, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7b, 0x0a,
	0x07, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x54, 0x78, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x54, 0x78, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x78, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5c, 0x0a, 0x0e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x78,
	0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x2c, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x78, 0x52, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x56, 0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x70,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x54, 0x78,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x54, 0x78, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x02, 0x6f,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x73, 0x52, 0x02, 0x6f, 0x70, 0x22, 0x33, 0x0a,
	0x11, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x1e, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65,
	0x72, 0x72, 0x2a, 0x7f, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x77, 0x61, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x75, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x05, 0x2a, 0x37, 0x0a, 0x0c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x74, 0x78, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x2f, 0x0a, 0x09,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x71, 0x75, 0x69, 0x74, 0x65, 0x10, 0x02, 0x32, 0xd5, 0x02,
	0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x40, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x54, 0x58, 0x12, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x54, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x4d, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x78, 0x12, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x34, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x08, 0x4f, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x70,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x63, 0x79, 0x2f, 0x6e, 0x6f, 0x74,
	0x61, 0x72, 0x79, 0x2d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x61,
	0x72, 0x79, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_notary_service_proto_rawDescOnce sync.Once
	file_notary_service_proto_rawDescData = file_notary_service_proto_rawDesc
)

func file_notary_service_proto_rawDescGZIP() []byte {
	file_notary_service_proto_rawDescOnce.Do(func() {
		file_notary_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_notary_service_proto_rawDescData)
	})
	return file_notary_service_proto_rawDescData
}

var file_notary_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_notary_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_notary_service_proto_goTypes = []interface{}{
	(BlockchainTxStatus)(0),                  // 0: proto.BlockchainTxStatus
	(TicketStatus)(0),                        // 1: proto.TicketStatus
	(TicketOps)(0),                           // 2: proto.TicketOps
	(TransferPropertyRequest_NetworkType)(0), // 3: proto.TransferPropertyRequest.NetworkType
	(*Empty)(nil),                            // 4: proto.Empty
	(*CrossTxDetail)(nil),                    // 5: proto.CrossTxDetail
	(*Error)(nil),                            // 6: proto.Error
	(*CreateCrossTxReq)(nil),                 // 7: proto.CreateCrossTxReq
	(*CreateCrossTxResp)(nil),                // 8: proto.CreateCrossTxResp
	(*TransferPropertyRequest)(nil),          // 9: proto.TransferPropertyRequest
	(*TransferPropertyResponse)(nil),         // 10: proto.TransferPropertyResponse
	(*ListTxRequest)(nil),                    // 11: proto.ListTxRequest
	(*EscrowStatus)(nil),                     // 12: proto.EscrowStatus
	(*CrossTxStatus)(nil),                    // 13: proto.CrossTxStatus
	(*CrossTx)(nil),                          // 14: proto.CrossTx
	(*ListTxResponse)(nil),                   // 15: proto.ListTxResponse
	(*QueryTxRequest)(nil),                   // 16: proto.QueryTxRequest
	(*QueryTxResponse)(nil),                  // 17: proto.QueryTxResponse
	(*AdminOpTicketReq)(nil),                 // 18: proto.AdminOpTicketReq
	(*AdminOpTicketResp)(nil),                // 19: proto.AdminOpTicketResp
}
var file_notary_service_proto_depIdxs = []int32{
	5,  // 0: proto.CreateCrossTxReq.detail:type_name -> proto.CrossTxDetail
	6,  // 1: proto.CreateCrossTxResp.error:type_name -> proto.Error
	3,  // 2: proto.TransferPropertyRequest.networkType:type_name -> proto.TransferPropertyRequest.NetworkType
	6,  // 3: proto.TransferPropertyResponse.error:type_name -> proto.Error
	0,  // 4: proto.EscrowStatus.eStatus:type_name -> proto.BlockchainTxStatus
	0,  // 5: proto.EscrowStatus.fStatus:type_name -> proto.BlockchainTxStatus
	1,  // 6: proto.CrossTxStatus.tStatus:type_name -> proto.TicketStatus
	12, // 7: proto.CrossTxStatus.eStatus:type_name -> proto.EscrowStatus
	5,  // 8: proto.CrossTx.detail:type_name -> proto.CrossTxDetail
	13, // 9: proto.CrossTx.status:type_name -> proto.CrossTxStatus
	6,  // 10: proto.ListTxResponse.error:type_name -> proto.Error
	14, // 11: proto.ListTxResponse.detail:type_name -> proto.CrossTx
	6,  // 12: proto.QueryTxResponse.error:type_name -> proto.Error
	14, // 13: proto.QueryTxResponse.detail:type_name -> proto.CrossTx
	2,  // 14: proto.AdminOpTicketReq.op:type_name -> proto.TicketOps
	6,  // 15: proto.AdminOpTicketResp.err:type_name -> proto.Error
	7,  // 16: proto.NotaryService.CreateCTX:input_type -> proto.CreateCrossTxReq
	9,  // 17: proto.NotaryService.SubmitTx:input_type -> proto.TransferPropertyRequest
	4,  // 18: proto.NotaryService.ListTickets:input_type -> proto.Empty
	16, // 19: proto.NotaryService.GetTicket:input_type -> proto.QueryTxRequest
	18, // 20: proto.NotaryService.OpTicket:input_type -> proto.AdminOpTicketReq
	8,  // 21: proto.NotaryService.CreateCTX:output_type -> proto.CreateCrossTxResp
	10, // 22: proto.NotaryService.SubmitTx:output_type -> proto.TransferPropertyResponse
	15, // 23: proto.NotaryService.ListTickets:output_type -> proto.ListTxResponse
	17, // 24: proto.NotaryService.GetTicket:output_type -> proto.QueryTxResponse
	19, // 25: proto.NotaryService.OpTicket:output_type -> proto.AdminOpTicketResp
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_notary_service_proto_init() }
func file_notary_service_proto_init() {
	if File_notary_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_notary_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossTxDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCrossTxReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCrossTxResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferPropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferPropertyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EscrowStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossTxStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminOpTicketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminOpTicketResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_notary_service_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*CrossTxStatus_TStatus)(nil),
		(*CrossTxStatus_EStatus)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_notary_service_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_notary_service_proto_goTypes,
		DependencyIndexes: file_notary_service_proto_depIdxs,
		EnumInfos:         file_notary_service_proto_enumTypes,
		MessageInfos:      file_notary_service_proto_msgTypes,
	}.Build()
	File_notary_service_proto = out.File
	file_notary_service_proto_rawDesc = nil
	file_notary_service_proto_goTypes = nil
	file_notary_service_proto_depIdxs = nil
}
